---
import { Lightbulb, Users, Settings, Crown, Award, Cog } from "lucide-astro";

const timelineItems = [
  {
    icon: Lightbulb,
    title: "We Understand Your Vision",
    text: "Every successful web project starts with deep discovery. We take time to understand your business goals, target audience, and competitive edge.",
  },
  {
    icon: Users,
    title: "We Plan with Precision", 
    text: " Using insights from discovery, we create a strategic roadmap, combining creative design thinking with data-driven planning for maximum impact.",
  },
  {
    icon: Cog,
    title: "We Design for Users and Search",
    text: " Our UX/UI experts craft visually engaging and SEO-friendly websites, striking a balance between user experience and technical structure for optimal performance.",
  },
  {
    icon: Crown,
    title: "We Develop Scalable Web Solutions",
    text: " From responsive websites to custom eCommerce platforms, our development ensures speed, security, and long-term scalability.",
  },
  {
    icon: Award,
    title: "We Support Your Growth",
    text: "Post-launch, we optimize for results, offering ongoing SEO, analytics, and updates to ensure your digital presence continues to grow.",
  },
];

const ICON_SIZE = 140;
const ITEM_SPACING = 250;
const STAGGER_OFFSET = 100;
---

<div class="wrapper">
  <h2 class="text-5xl mb-44 font-semibold text-white" >How are <span class="text-dd-primary">we different</span> ?</h2>

  <div class="timeline-container">
    <!-- Connection curves layer -->
    <div class="connections-layer">
      <svg 
        class="connections-svg" 
        style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1;"
      >
        {
          timelineItems.map((_, index) => {
            if (index >= timelineItems.length - 1) return null;
            
            const nextIndex = index + 1;
            const currentY = index % 2 !== 0 ? STAGGER_OFFSET : 0;
            const nextY = nextIndex % 2 !== 0 ? STAGGER_OFFSET : 0;
            
            const startX = index * ITEM_SPACING + ICON_SIZE/2;
            const startY = 150 + ICON_SIZE/2 + currentY;
            const endX = nextIndex * ITEM_SPACING + ICON_SIZE/2;
            const endY = 150 + ICON_SIZE/2 + nextY;
            
            // Create control points for a smooth curve
            const midX = (startX + endX) / 2;
            const midY = (startY + endY) / 2;
            
            // Add curve bulge - inverse rounded effect
            const bulgeDirection = currentY !== nextY ? 
              (currentY < nextY ? -1 : 1) : // If there's a height difference, bulge towards the center
              (index % 2 === 0 ? 1 : -1);  // Otherwise alternate bulge direction
            
            const bulgeAmount = 80;
            const controlX = midX;
            const controlY = midY + (bulgeDirection * bulgeAmount);
            
            return (
              <path
                d={`M ${startX} ${startY} Q ${controlX} ${controlY} ${endX} ${endY}`}
                // stroke="#ef4444"
                stroke-width="20"
                fill="none"
                stroke-linecap="round"
                style="filter: drop-shadow(0px 2px 4px rgba(239, 68, 68, 0.3));"
              />
            );
          })
        }
      </svg>
    </div>

    <!-- Circles and content layer -->
    <div class="content-layer">
      {
        timelineItems.map((item, index) => (
          <div
            class="timeline-item"
            style={`
              left: ${index * ITEM_SPACING}px;
              transform: ${index % 2 !== 0 ? `translateY(${STAGGER_OFFSET}px)` : "translateY(0)"};
            `}
          >
            <!-- Circle with icon -->
            <div class="circle">
              <div class="inner-circle">
                <item.icon color="white" size={48} />
              </div>
            </div>
            
            <!-- Text content -->
            <div class="text-block">
              <div class="connector-line"></div>
              <h3>{item.title}</h3>
              <p>{item.text}</p>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<style define:vars={{
  ICON_SIZE: `${ICON_SIZE}px`,
  ITEM_SPACING: `${ITEM_SPACING}px`,
  STAGGER_OFFSET: `${STAGGER_OFFSET}px`,
}}>
  .wrapper {
   
    padding: 4rem 1rem;
    background-color: #0000;
    text-align: center;
    overflow-x: auto;
    height: calc(var(--ICON_SIZE) + var(--STAGGER_OFFSET) + 700px);
  }
  
 

  .timeline-container {
    position: relative;
    width: calc(var(--ITEM_SPACING) * 4 + var(--ICON_SIZE));
    height: calc(var(--ICON_SIZE) + var(--STAGGER_OFFSET) + 200px);
    margin: 0 auto;
  }

  .connections-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .connections-svg {
    pointer-events: none;
  }

  .content-layer {
    position: absolute;
    top: 150px;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
  }

  .timeline-item {
    position: absolute;
    width: var(--ICON_SIZE);
    height: var(--ICON_SIZE);
  }

  .circle {
    width: calc(var(--ICON_SIZE) + 16px);
    height: calc(var(--ICON_SIZE) + 16px);;
    border-radius: 50%;
    background-color: #DD4242;
    display: flex;
    align-items: center;
    justify-content: center;
    /* box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3); */
    position: relative;
    z-index: 3;
  }

  .inner-circle {
    width: calc(var(--ICON_SIZE) - 16px);
    height: calc(var(--ICON_SIZE) - 16px);
    border-radius: 50%;
    background-color: #111319;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .text-block {
    position: absolute;
    width: 200px;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
    padding-bottom: 10px;
    padding-top: 10px;
  }

  .text-block .connector-line {
    position: absolute;
    left: 53%;
    transform: translateX(-50%);
    width: 4px;
    height: 46px; 
    background-color: #DD4242;
    border-radius: 18px;
    z-index: auto;
  }

  .timeline-item:nth-child(odd) .text-block {
    bottom: calc(100% + 50px);
  }
  
  .timeline-item:nth-child(odd) .text-block .connector-line {
    top: 100%;
  }

  .timeline-item:nth-child(even) .text-block {
    top: calc(100% + 70px);
  }
  
  .timeline-item:nth-child(even) .text-block .connector-line {
    bottom: 100%;
  }

  .text-block h3 {
    font-weight: 700;
    color: #DD4242;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
  }
  
  .text-block p {
    font-size: 0.875rem;
    color: #fff;
    line-height: 1.4;
  }
</style>